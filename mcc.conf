# MC's Charging Controller
# mcc Configurations ( 201803221 )
# MCMotherEffin' @ XDA Developers

# Copyright (c) 2018 Jaymin " MCMotherEffin' " Suthar. All rights reserved.

# This file is a part of the project "MC's Charging Controller ( mcc )".

# I MCMotherEffin', hereby declare that mcc is originally distributed from
## me under the terms of the GNU GPL v3 and you are allowed to use, modify
## or re-distribute the work done for mcc under v3 or any later version of
## GNU GPL as published by the Free Software Foundation provided that this
## declaration and the above copyright notice is included.

# mcc was entirely written to help people extend their device's battery by
## controlling charging, without any kind of WARRANTY, and I can't be held
## responsible for any damage, or just anything bad happened.

# Finally, you should obtain a copy of the GNU GPL v3 from <http://gnu.org/licenses/>.

# Some info about this file

# This file is the config file which will be used by the Main to store all
## the settings and references. A detailed description about each entry is
## given below, refer to that as if were here.

# Boolean settings used by mcc
## They are to be interpreted by shell, so should take values true / false

auto_shut=true
auto_switch=true
daemon_mode=true

# Thresholds ( % ) used by mcc
## They take any number ranging from 0 to 100, without the percentage sign

up_threshold=80
down_threshold=70
shut_threshold=20

# sysfs references used by mcc
## uevent takes the path to the battery device / module uevent.
## A switch takes 'PATH ON OFF'. Where PATH is the path to switch that can
## turn charging ON / OFF, ON is the value of it while charging is enabled
## and is the same for OFF, except for charging being disabled.

uevent=dummy_Events
switch_1=dummy_Switch
switch_2=dummy_Switch

# A little description on what is the base of mcc

# A uevent file contains events sent by the device / module in a good text
## format, which we can parse to detect stuff related to the device or the
## module, it can be parsed in way similar to build.prop, and they, unless
## some special OEM will mostly be mode 644.

# A switch is an independant file which has each entry of the uevent file.
## Which can be written externally to ask the device / module of a change,
## these files will always be writable if they are actual switches and not
## just an event entry, they also will mostly be mode 644, unless...

# And for mcc, mcc parses the battery device / module uevent to detect the
## battery level, health, current and if is charging or not and writes the
## switch to ask the device / module to turn charging ON / OFF. The events
## parsed will respectively be POWER_SUPPLY_CAPACITY, POWER_SUPPLY_HEALTH,
## POWER_SUPPLY_CURRENT_NOW and POWER_SUPPLY_STATUS. And switches can take
## various booleans, see set_ctrl_refs() in the Main for the list.

# An important thing is that most OEMs implement two switches, not one. So
## both of them can be used, but the problem is, one of them will halt the
## battery level instead of stopping the entire charging mechanism. So mcc
## allows two switches
