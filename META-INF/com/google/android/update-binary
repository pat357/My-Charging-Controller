#!/sbin/sh
# MC's Charging Controller
# mcc Installer ( 201803231 )
# MCMotherEffin' @ XDA Developers

# Copyright (c) 2018 Jaymin " MCMotherEffin' " Suthar. All rights reserved.

# This file is a part of the project "MC's Charging Controller ( mcc )".

# I MCMotherEffin', hereby declare that mcc is originally distributed from
## me under the terms of the GNU GPL v3 and you are allowed to use, modify
## or re-distribute the work done for mcc under v3 or any later version of
## GNU GPL as published by the Free Software Foundation provided that this
## declaration and the above copyright notice is included.

# mcc was entirely written to help people extend their device's battery by
## controlling charging, without any kind of WARRANTY, and I can't be held
## responsible for any damage, or just anything bad happened.

# Finally, you should obtain a copy of the GNU GPL v3 from <http://gnu.org/licenses/>.

# Some info about this file

# This file is the installer script which will be ran by Magisk Manager or
## the recovery flashing the module. It firstly will do some detections to
## figure out the environment, then dynamically detect Magisk mount point,
## and set BusyBox up. It will then check if the device is compatible with
## the module, and as recoveries ( mostly ) contain different kernel, them
## flashing mcc is unwanted. If the check succeeded, it will edit mcc.conf
## with the detected references. And finally, it will install or uninstall
## the module based on the installtion status.

# Pre-exec operations
if grep '^/sbin/sh' </proc/$$/cmdline >/dev/null; then
    for message in ' ' '- mcc must be installed from booted Android, aborting...' ' '; do
        echo -e "ui_print $message\nui_print" >>/proc/self/fd/$2;
    done;
    exit 1;
elif [ $(magisk -V) -lt 1410 ]; then
    echo ' '; echo ' ';
    echo -e "- mcc must be installed with Magisk >= 1410, aborting...\n"; exit 1;
else
    set -x; echo ' '; echo ' ';
fi;

# Find BusyBox, Magisk mountpoint and set BusyBox up
for magisk_bb in $(find /data -type f -name busybox | grep '/magisk/busybox$'); do
    if $magisk_bb | grep 'topjohnwu ' >/dev/null; then
        if image=$(ls ${magisk_bb%/*/*}/magisk.img); then
            for loop_device in /dev/block/loop*; do
                if $magisk_bb losetup $loop_device | grep " $image$" >/dev/null; then
                    for real_mount_point in $(grep "^$loop_device " /proc/mounts | $magisk_bb awk '{ print $2 }' | grep -Ev '^/system|^/vendor'); do
                        if ! grep '^com.google.android.gms.unstable$' $real_mount_point/.core/hidelist >/dev/null || ! test -d $real_mount_point/lost+found || ! test -d $real_mount_point/.core/service.d; then
                            unset real_mount_point;
                        else
                            break 3;
                        fi;
                    done;
                fi;
            done;
        fi;
    fi;
    unset magisk_bb;
done;
tmp_dir=/dev/mcc_tmp;
tmp_bin=$tmp_dir/busybox;
rm -rf $tmp_bin; mkdir -p $tmp_bin;
cp -a $magisk_bb $tmp_bin/;
$tmp_bin/busybox --install $tmp_bin/;
export PATH=$tmp_bin:$PATH;
if [ -z $magisk_bb ] || [ -z $real_mount_point ] || [ "$(which awk)" != $tmp_bin/awk ]; then
    echo -e "- Failed to set environment via Magisk, aborting...\n"; exit 1;
fi;

# Define variables ( for missing see above )
zip_file="$3";
tmp_file=$tmp_dir/cached;
mount_point=/dev/mcc_img;
mod_dir=$mount_point/mcc;
inst_mod_dir=$real_mount_point/mcc;
lock_file=$inst_mod_dir/cache/lock_d;
image=${image%/*}/magisk_merge.img;

# Define functions ( they are quite hardcoded )

abort() { printp "$1, aborting..."; exit 1; }

printp() { echo -e "- $1\n"; }

get_prop() { sed -n "s/^$1=//p" $2; }

set_prop() { sed -i "s|^$1=.*|$1=$2|g" $mod_dir/mcc.conf; }

is_charging() { grep -q '^POWER_SUPPLY_STATUS=[Cc]harging$' $uevent; }

which_installed() { get_prop versionCode $inst_mod_dir/module.prop || echo 0; }

imgsize_test() {
    e2fsck -n $image | grep -Eo '[0-9]+/[0-9]+ blocks' | cut -d/ -f$1 | awk '{ print int(($1 + 255) / 256) }';
}

set_perm_recursive() {
    find $1 | while read entry; do
        chown 0:$2 $entry;
        if [[ ! -d $entry ]]; then chmod $3 $entry; else chmod 0755 $entry; fi;
        chcon u:object_r:system_file:s0 $entry;
    done;
}

# Print the module banner
printp '------------------------------------------------'; echo ' ';
printp "     MC's Charging Controller";
printp "         by MCMotherEffin' @ XDA Developers";
printp '------------------------------------------------'; echo ' ';
echo ' '; echo ' '; echo ' ';

# Test compatibility and set references ( see the Main for documentation )
printp 'Checking compatibility ( requires the battery be charging )...';
sleep 3;
find /sys/devices /sys/module -type f -name uevent >$tmp_file;
touch $lock_file;
i=1;
while read uevent; do
    if grep -q '^POWER_SUPPLY_NAME=.*[Bb]att.*$' $uevent; then
        if is_charging; then
            for ref in ${uevent%/*}/*; do
                if [[ -f $ref ]]; then
                    if ls -l $ref | grep -Eq '^[a-z-]+w[a-z-]* '; then
                        case $(cat $ref) in
                            1       ) c_ON=1;        c_OFF=0;        ;;
                            0       ) c_ON=0;        c_OFF=1;        ;;
                            on      ) c_ON=on;       c_OFF=off;      ;;
                            off     ) c_ON=off;      c_OFF=on;       ;;
                            true    ) c_ON=true;     c_OFF=false;    ;;
                            false   ) c_ON=false;    c_OFF=true;     ;;
                            enable  ) c_ON=enable;   c_OFF=disable;  ;;
                            disable ) c_ON=disable;  c_OFF=enable;   ;;
                            enabled ) c_ON=enabled;  c_OFF=disabled; ;;
                            disabled) c_ON=disabled; c_OFF=enabled;  ;;
                            *       ) continue;                      ;;
                        esac;
                        echo $c_OFF >$ref; sleep 1;
                        if ! is_charging; then
                            echo $c_ON >$ref; sleep 1;
                            if is_charging; then
                                eval switch_$i=\"$ref $c_ON $c_OFF\"; let i++;
                                if [[ $i -eq 3 ]]; then break 2; fi;
                            fi;
                        fi;
                        echo $c_ON >$ref;
                    else
                        continue;
                    fi;
                fi;
            done;
            if [[ $i -gt 1 ]]; then break; fi;
        fi;
    fi;
done <$tmp_file;
rm -f $lock_file;
if [[ $i -gt 1 ]]; then
    printp OK; echo ' '; echo ' '; echo ' ';
else
    abort 'Failed the check';
fi;

# Get the image ready and mounted
if [[ -f $image ]]; then
    printp "Found $image";
    e2fsck -pf $image >&2;
    img_total=$(imgsize_test 2);
    if [[ $(imgsize_test 1) -eq $img_total ]]; then
        printp "Resizing $image...";
        resize2fs $image $((img_total + 32))M;
    fi;
else
    printp "Creating $image...";
    if ! make_ext4fs -l 64M $image >&2; then
        /system/bin/mke2fs -t ext4 $image 64M >&2;
    fi;
fi;
printp "Mounting $image...";
mkdir $mount_point;
for minor in 1 2 3 4 5 6 7; do
    loop_device=/dev/block/loop$minor;
    if [[ ! -b $loop_device ]]; then mknod $loop_device b 7 $minor; fi;
    if losetup $loop_device $image; then
        if mount -t ext4 -o rw,noatime $loop_device $mount_point; then
            break;
        fi;
    fi;
done;
if ! grep -q " $mount_point " /proc/mounts; then
    abort "Failed to mount $image";
fi;

if [[ $(get_prop versionCode $mod_dir/module.prop || which_installed) -ge 201803231 ]]; then

    # Uninstall
    printp 'Same or newer installed, uninstalling to FATU...';
    rm -rf $mod_dir $inst_mod_dir /cache/mcc_e*.log;
    kill $(ps | grep -v ' grep ' | grep ' {mcc} ' | awk '{ print $1 }' | tr '\n' ' ');
    if inst_mcc=$(ls /system/xbin/mcc || ls /system/bin/mcc); then
        umount $inst_mcc; rm -f $inst_mcc; umount ${inst_mcc%/*};
    fi;
else

    # Install
    rm -rf $mod_dir; mkdir -p $mod_dir/docs $mod_dir/cache;
    printp 'Extracting mcc files...';
    unzip -o "$zip_file" 'system/*' mcc.conf service.sh module.prop -d $mod_dir >&2;
    unzip -o "$zip_file" README.md -d $mod_dir/docs >&2;
    bin_dir=$mod_dir/system/xbin;
    if [[ ! -d /system/xbin ]]; then
        mv $bin_dir $mod_dir/system/bin; bin_dir=$mod_dir/system/bin;
    fi;
    if [[ $(which_installed) -ge 201802251 ]]; then
        if old_conf=$(ls $inst_mod_dir/mcc.conf); then
            printp 'Restoring configurations...';
            for prop in auto_shut auto_switch daemon_mode up_threshold down_threshold shut_threshold; do
                set_prop $prop $(get_prop $prop $old_conf);
            done;
        fi;
    fi;
    set_prop uevent $uevent;
    for i in 1 2; do
        switch="$(eval echo \$switch_$i)";
        case $switch in
            '') break;                        ;;
            * ) set_prop switch_$i "$switch"; ;;
        esac;
    done;
    touch $mod_dir/auto_mount;
    mkdir $inst_mod_dir;
    touch $inst_mod_dir/update;
    cp -f $mod_dir/module.prop $inst_mod_dir;
    printp 'Setting permissions...';
    set_perm_recursive $mod_dir    0 0644;
    set_perm_recursive $bin_dir 2000 0755;
fi;

# Finalize
umount $mount_point; losetup -d $loop_device;
rmdir $mount_point; rm -rf $tmp_dir;
printp Done; echo ' '; echo ' '; echo ' ';
exit 0;
